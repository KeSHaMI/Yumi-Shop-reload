import telebot
from telebot import types
import json
import requests
import re
from config import Token, password, domen, login, password_box, method
import pymongo
from collections import Counter

bot = telebot.TeleBot(Token)

cluster = pymongo.MongoClient(f'mongodb+srv://Kesha:{password}@shop-ocoyn.mongodb.net/test?retryWrites=true&w=majority')

db = cluster['Shop']
collection = db['Tovars']

collection_user = db['Users']


def get_user(call, key):
    try:
        return  list(collection_user.find({'_id' : call.message.chat.id}))[0][key]
    except:
        return list(collection_user.find({'_id': call.chat.id}))[0][key]
def get_tovar(call, key, index='index'):

    tovar = list(collection.find({'category': get_user(call, 'category')}))[int(get_user(call, index))]

    return tovar[key]

def get_bucket(call):
    return sorted(Counter(get_user(call, 'tovar_id')).keys())[int(get_user(call, 'index_buck'))]

@bot.message_handler(commands=['start'])
def start(message):
    if not collection_user.find_one({'_id': message.chat.id}):
        collection_user.insert_one({'_id': message.chat.id,
                                    'name': None,
                                    'number': 0,
                                    'index': 0,
                                    'index_buck': 0,
                                    'category': 0,
                                    'tovar_id': [],

                                    })
    else:

        collection_user.update_one({'_id': message.chat.id},
                                   {'$set' : {'index' : 0,
                                              'category' : 0,
                                              'index_buck': 0,
                                              }})

    markup = types.InlineKeyboardMarkup(row_width=1)

    but1 = types.InlineKeyboardButton('–¢–æ–≤–∞—Ä–∏', callback_data='tovars')
    but2 = types.InlineKeyboardButton('–ö–æ—à–∏–∫', callback_data='bucket')
    but3 = types.InlineKeyboardButton('–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å', callback_data='orders')

    markup.add(but1, but2, but3)

    bot.send_message(message.chat.id, '–í—ñ—Ç–∞—î–º–æ!\n'
                                      '–Ø –±–æ—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ü—ñ—ó YUMI Lashes \n' 
                                      '–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –¥–æ–±–∞–≤—Ç–µ —ó—Ö –≤ –∫–æ—à–∏–∫. \n'
                                      '–ü—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä—É.\n'
                                      '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'tovars')
def categories(call):

    markup = types.InlineKeyboardMarkup(row_width=1)

    but1 = types.InlineKeyboardButton('–û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏', callback_data='14')
    but2 = types.InlineKeyboardButton('–ê–∫—Å–µ—Å—É–∞—Ä–∏', callback_data='13')

    markup.add(but1, but2)

    bot.send_message(call.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['13', '14'])
def tovars(call):
    markup = types.InlineKeyboardMarkup()
    if  call.data in ['13', '14']:
        collection_user.update_one({'_id':call.message.chat.id}, {'$set': {'category': call.data}})

        markup.row(types.InlineKeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏: ({} –≥—Ä–Ω)'.format(get_tovar(call, 'price')[:-3]),
                                          callback_data='add{}'.format(get_tovar(call, '_id'))))


        but1 = types.InlineKeyboardButton('‚¨Ö', callback_data='minus')
        but2 = types.InlineKeyboardButton('{}/{}'.format(int(get_user(call, 'index'))+1,
                                                         len(list(collection.find({'category': get_tovar(call, 'category')})))),
                                          callback_data='Noooooooooo')
        but3 =  types.InlineKeyboardButton('‚û°', callback_data='plus')

        markup.row(but1, but2, but3)

        markup.row(types.InlineKeyboardButton('–ö–æ—à–∏–∫', callback_data='bucket'))

        markup.row(types.InlineKeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='tovars'))

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='<a href="{1}">{0}</a>'.format(get_tovar(call, 'name'), get_tovar(call, 'image')),
                              parse_mode='HTML', reply_markup=markup
                              )

    else:
        if Counter(get_user(call, 'tovar_id')).get(get_tovar(call, '_id')):
            markup.row(types.InlineKeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏: ({} –≥—Ä–Ω) - {}—à—Ç'.format(get_tovar(call, 'price')[:-3],
                                                    Counter(get_user(call, 'tovar_id')).get(get_tovar(call, '_id'))),
                                                  callback_data='add{}'.format(get_tovar(call, '_id'))))


        else:
            markup.row(types.InlineKeyboardButton('{} –≥—Ä–Ω'.format(get_tovar(call, 'price')[:-3]),
                                                  callback_data='add{}'.format(get_tovar(call, '_id'))))


        but1 = types.InlineKeyboardButton('‚¨Ö', callback_data='minus')
        but2 = types.InlineKeyboardButton('{}/{}'.format(int(get_user(call, 'index')) + 1,
                                                         len(list(collection.find(
                                                             {'category': get_tovar(call, 'category')})))),
                                          callback_data='Noooooooooo')
        but3 = types.InlineKeyboardButton('‚û°', callback_data='plus')

        markup.row(but1, but2, but3)
        markup.row(types.InlineKeyboardButton('–ö–æ—à–∏–∫', callback_data='bucket'))
        markup.row(types.InlineKeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥', callback_data='tovars'))

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup,
                              text='<a href="{1}">{0}</a>'.format(get_tovar(call, 'name'), get_tovar(call, 'image')), parse_mode='HTML'
                              )


@bot.callback_query_handler(func=lambda call: call.data.startswith('ad'))
def add_tovar(call):
    if call.data[2] == '-':
        prods = get_user(call, 'tovar_id')
        i = 0
        while prods[i] != call.data[3:]:
            i += 1
            continue
        prods.pop(i)
        collection_user.update_one({'_id' : call.message.chat.id},
                                   {'$set': {'tovar_id' : prods}})
        if call.data[3:] not in prods:
            collection_user.update_one({'_id': call.message.chat.id},
                                       {'$set': {'index_buck': 0}})

    else:
        collection_user.update_one({'_id' : call.message.chat.id},
                                   {'$push' : {'tovar_id' : call.data[3:]},})
    if (call.data[2] == 'b' )or (call.data[2] == '-'):
        bucket_upd(call)
    else:
        tovars(call)

@bot.callback_query_handler(func=lambda call: call.data in ['plus', 'minus'])
def change_tovar(call):
    index = int(get_user(call, 'index'))
    if call.data == 'plus':
        if index == len(list(collection.find({'category': get_tovar(call, 'category')})))-1:
            index = -1
        collection_user.update_one({'_id' : call.message.chat.id},
                                   {'$set': {'index' : index+1}})

    else:
        if index == 0:
            index = len(list(collection.find({'category': get_tovar(call, 'category')})))
        collection_user.update_one({'_id': call.message.chat.id},
                                   {'$set': {'index': index-1}})
    tovars(call)


@bot.callback_query_handler(func=lambda call: call.data == 'bucket')
def bucket_upd(call):
    try:
        markup = types.InlineKeyboardMarkup(row_width=4)

        but1 = types.InlineKeyboardButton('‚ùå', callback_data='delete{}'.format(get_bucket(call)))
        but2 = types.InlineKeyboardButton('üîª', callback_data='ad-{}'.format(get_bucket(call)))
        but3 = types.InlineKeyboardButton('{}—à—Ç'.format(Counter(get_user(call, 'tovar_id')).get(get_bucket(call))), callback_data='None')
        but4 = types.InlineKeyboardButton('üî∫', callback_data='adb{}'.format(get_bucket(call)))
        but5 = types.InlineKeyboardButton('‚¨Ö', callback_data='prev')
        but6 = types.InlineKeyboardButton('{}/{}'.format(int(get_user(call, 'index_buck'))+1, len(Counter(get_user(call, 'tovar_id')).keys())), callback_data='None')
        but7 = types.InlineKeyboardButton('‚û°', callback_data='next')
        but8 = types.InlineKeyboardButton('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ {}–≥—Ä–Ω. –û—Ñ–æ—Ä–º–∏—Ç–∏?'.format(sum([int(list(collection.find({'_id' : key}))[0]['price'][:-3])*value
                                                                                        for key, value
                                                                                        in Counter(get_user(call, 'tovar_id')).items()])),
                                          callback_data='confirm')

        markup.row(but1, but2, but3, but4)
        markup.row(but5, but6, but7)
        markup.row(but8)

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–í–∞—à –∫–æ—à–∏–∫:\n'
                                    '<a href="{1}">{0}</a>'.format(list(collection.find({'_id': get_bucket(call)}))[0]['name'],
                                                                   list(collection.find({'_id': get_bucket(call)}))[0]['image']),
                              parse_mode='HTML', reply_markup=markup
                              )

    except IndexError:
        bot.send_message(call.message.chat.id, '–í –∫–æ—à–∏–∫—É –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ :(')
        categories(call)

@bot.callback_query_handler(func=lambda call: call.data in ['next', 'prev'])
def change_bucket(call):
    index = int(get_user(call, 'index_buck'))
    if call.data == 'next':
        if index == len(Counter(get_user(call, 'tovar_id')).keys())-1:
             index = -1
        collection_user.update_one({'_id' : call.message.chat.id},
                                   {'$set': {'index_buck' : index+1}})

    else:
        if index == 0:
            index = len(Counter(get_user(call, 'tovar_id')).keys())
        collection_user.update_one({'_id': call.message.chat.id},
                                   {'$set': {'index_buck': index-1}})

    bucket_upd(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete'))
def delete(call):
    collection_user.update_one({'_id': call.message.chat.id},
                               {'$pull': {'tovar_id' : {'$in' : [call.data[6:]]}}})
    collection_user.update_one({'_id': call.message.chat.id},
                               {'$set': {'index_buck': 0}})


    bucket_upd(call)

@bot.callback_query_handler(func=lambda call: call.data == 'confirm')
def confirm(call):

    markup = types.InlineKeyboardMarkup(row_width=2)

    but1 = types.InlineKeyboardButton('–°–∞–º–æ–≤–∏–≤—ñ–∑', callback_data='–°–∞–º–æ–≤–∏–≤—ñ–∑')
    but2 = types.InlineKeyboardButton('–ù–æ–≤–∞ –ü–æ—à—Ç–∞', callback_data='–ù–æ–≤–∞ –ü–æ—à—Ç–∞')
    but3 = types.InlineKeyboardButton('–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='cancel')
    but4 = types.InlineKeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å', callback_data='bucket')

    markup.add(but1, but2, but3, but4)

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['–°–∞–º–æ–≤–∏–≤—ñ–∑', '–ù–æ–≤–∞ –ü–æ—à—Ç–∞'])
def record_delivery(call):
    collection_user.update_one({'_id' : call.message.chat.id},
                               {'$set' : {'delivery' : call.data.replace('–ù–æ–≤–∞ –ü–æ—à—Ç–∞', '2').replace('–°–∞–º–æ–≤–∏–≤—ñ–∑', '1')}})
    if get_user(call, 'name') == None:
        get_name(call.message)
    else:
        summary(call.message)


def get_name(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ü–Ü–ë:')
    bot.register_next_step_handler(message, record_name)

def record_name(message):
    collection_user.update_one({'_id': message.chat.id},
                               {'$set': {'name': message.text.replace(' ', '%20')}})
    if get_user(message, 'number') != 0:
        summary(message)
    else:
        get_number(message)

def get_number(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    but1 = types.KeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)

    markup.add(but1)

    bot.send_message(message.chat.id, ' –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ (380) –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç',
                     reply_markup=markup)
    bot.register_next_step_handler(message, record_number)

def record_number(message):
    if type(message.contact) == type(None):  # Protection vs non-contact input
        if re.match('^380\d{9}$', message.text):  # Cheking if input is a phone number
            collection_user.update_one({'_id': message.chat.id},
                                       {'$set': {'number': message.text}})
            summary(message)
        else:
            bot.send_message(chat_id=message.chat.id, text='–ù–æ–º–µ—Ä –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ!')
            get_number(message)

    else:
        if message.contact.phone_number.startswith('+'):
            collection_user.update_one({'_id': message.chat.id},
                                   {'$set': {'number': message.contact.phone_number[1:]}})
        else:
            collection_user.update_one({'_id': message.chat.id},
                                       {'$set': {'number': message.contact.phone_number}})
        summary(message)

def summary(message):
    markup = types.InlineKeyboardMarkup(row_width=1)

    but1 = types.InlineKeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='confirm')
    but2 = types.InlineKeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ —ñ–º\'—è', callback_data='get_name')
    but3 = types.InlineKeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', callback_data='get_number')
    but4 = types.InlineKeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='final')

    markup.add(but1, but2, but3, but4)

    bot.send_message(chat_id=message.chat.id, reply_markup=markup,
                          text="–î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
                               "–°—É–º–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: _{0}–≥—Ä–Ω_\n"
                               "–Ü–º'—è: _{1}_\n"
                               "–¢–µ–ª–µ—Ñ–æ–Ω: _{2}_\n"
                               "–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏: _{3}_".format(
                              sum([int(list(collection.find({'_id' : key}))[0]['price'][:-3])*value for key, value in Counter(get_user(message, 'tovar_id')).items()]),
                              get_user(message, 'name'), get_user(message, 'number'), ('–ù–æ–≤–∞ –ü–æ—à—Ç–∞' if get_user(message, 'delivery') == '2' else '–°–∞–º–æ–≤–∏–≤—ñ–∑')


                          ), parse_mode='MarkdownV2')

@bot.callback_query_handler(func=lambda call: call.data in ['get_name', 'get_number'])
def change(call):
    if call.data == 'get_number':
        get_number(call.message)
    else:
        get_name(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'final')
def send_request(call):

    clientnamefirst = get_user(call, 'name')
    clientphone =  get_user(call, 'number')
    delivery = get_user(call, 'delivery')

    url = '{0}{1}?login={2}' \
                      '&password={3}' \
                      '&workflowid=11' \
                      '&clientnamefirst={4}' \
                      '&clientphone={5}' \
                      '&order_deliveryid={6}'.format(domen, method, login, password_box,
                                                clientnamefirst,
                                                clientphone, delivery)

    for i, item in enumerate(Counter(get_user(call, 'tovar_id')).most_common()):
        url += '&productArray[{0}][id]={2}&productArray[{1}][count]={3}'.format(
            i, i, item[0], item[1]
        )
    r_update = requests.get(url=url)

    data = r_update.json()
    if data['result'] == 'ok':
        bot.send_message(call.message.chat.id, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
        collection_user.update_one({'_id': call.message.chat.id},
                                   {'$set': {'index': 0,
                                             'category': 0,
                                             'index_buck': 0,
                                             'tovar_id' : [],
                                             'delivery' : None
                                             }})
    start(call.message)

@bot.callback_query_handler(func=lambda call: call.data == 'orders')
def get_ord_number(call):
    if get_user(call, 'number') == 0:
        markup = types.ReplyKeyboardMarkup()

        but1 = types.KeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)

        markup.add(but1)

        bot.send_message(call.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ (380) –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç',
                         reply_markup=markup)
        bot.register_next_step_handler(call.message, ord_record_number)
    else:
        orders(call.message)

def ord_record_number(message):
    if type(message.contact) == type(None):  # Protection vs non-contact input
        if re.match('^380\d{9}$', message.text):  # Cheking if input is a phone number
            collection_user.update_one({'_id': message.chat.id},
                                       {'$set': {'number': message.text}})
            orders(message)
        else:
            bot.send_message(chat_id=message.chat.id, text='–ù–æ–º–µ—Ä –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ!')
            get_ord_number(message)

    else:
        collection_user.update_one({'_id': message.chat.id},
                                   {'$set': {'number': message.contact.phone_number[1:]}})
        orders(message)

def orders(message):
    number = get_user(message, 'number')

    url = 'https://crm.yumilashes.com.ua/api/orders/get/'\
        f'?login=yuriy&password=5cd1e067f9a747c45e6d5a0896aac817&clientphone={number}&workflowid=11'

    data = requests.get(url).json()

    for i in range(len(data['orders'])):
        text = ''
        text += '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ ' + data['orders'][i]['orderid'] + '\n'
        text += '–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:' + '\n' + '\n'

        for x in range(len(data['orders'][i]['products'])):
            text += data['orders'][i]['products'][x]['name'] + ' - ' + data['orders'][i]['products'][x]['count'][:-4] + '—à—Ç'+ '\n'

        text += '\n' + '–°—É–º–∞: '  + data['orders'][i]['sum'][:-3] + '\n'
        text += '–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:' + data['orders'][i]['statusname']

        bot.send_message(message.chat.id, text)

    markup = types.InlineKeyboardMarkup(row_width=1)

    but1 = types.InlineKeyboardButton('–¢–æ–≤–∞—Ä–∏', callback_data='tovars')
    but2 = types.InlineKeyboardButton('–ö–æ—à–∏–∫', callback_data='bucket')
    but3 = types.InlineKeyboardButton('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è', callback_data='orders')

    markup.add(but1, but2, but3)

    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é', reply_markup=markup, )



bot.polling(none_stop=True)
